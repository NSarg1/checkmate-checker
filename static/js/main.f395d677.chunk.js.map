{"version":3,"sources":["pages/mate-checker/mate-checker.methods.js","components/chess-figure/ChessFigure.styled.js","components/chess-figure/ChessFigure.component.jsx","components/chess-board/ChessBoard.styled.js","components/chess-board/ChessBoard.component.jsx","components/button/Button.copmponent.jsx","components/modal/Modal.component.jsx","pages/mate-checker/MateChecker.page.jsx","App/App.js","index.js"],"names":["Figures","state","positions","isProtected","this","JSON","parse","stringify","attackZone","king","queen","horse","bishop","blackKing","selfPosition","blackKingRow","blackKingInd","isUnderAttack","_board","valArr","i","k","push","includes","rowNum","pos","curFigure","numMainDiagonal","numSecDiagonal","whiteList","loop","isNotBlocking","posMinus1","posMinus2","posPlus1","posPlus2","queenZone","bishopZone","kingZone","horseZone","Image","styled","div","props","activeFigure","elm","ChessFigure","selectActiveFigure","classes","className","join","onClick","bind","BoardCell","li","figuresProtected","item","ChessBoard","setFigures","map","row","rowIdx","key","itemIdx","event","x","clientX","y","clientY","handleClick","CustomButton","children","otherProps","animationTiming","enter","exit","modal","show","closeModal","mateStatus","ReactDOM","createPortal","Transition","mountOnEnter","unmountOnExit","in","timeout","cssClasses","document","getElementById","MateChecker","initialState","Array","fill","initialPositions","10","undefined","20","30","40","50","initialProtected","useState","setState","isSubmited","setIsSubmited","setActiveFigure","setFiguresProtected","figuresPositions","setFiguresPositions","setMateStatus","selectedFigure","figures","Object","values","alert","whiteKing","whiteKingRow","whiteKingInd","Math","abs","kingsPositionsValidator","runAll","prevState","checkIsMate","keys","stateJSON","App","render"],"mappings":"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","file":"static/js/main.f395d677.chunk.js","sourcesContent":["export class Figures {\r\n    constructor(state, positions, isProtected) {\r\n        this.state = JSON.parse(JSON.stringify(state)); // DID DEEP COPY\r\n        this.positions = { ...positions };\r\n        this.isProtected = { ...isProtected };\r\n        this.attackZone = 1;\r\n        this.king = 10;\r\n        this.queen = 20;\r\n        this.horse = 30;\r\n        this.bishop = 40;\r\n        this.blackKing = 50;\r\n    }\r\n    //CHECKMATE CHECKING\r\n    checkIsMate() {\r\n        const selfPosition = this.blackKing;\r\n        const [blackKingRow, blackKingInd] = this.positions[selfPosition];\r\n        const isUnderAttack = this.isProtected[selfPosition];\r\n        const _board = [...this.state];\r\n\r\n        const valArr = [];\r\n        for (let i = blackKingRow - 1; i <= blackKingRow + 1; i++) {\r\n            if (!_board[i]) continue;\r\n            for (let k = blackKingInd - 1; k <= blackKingInd + 1; k++) {\r\n                if (!_board[i][k] && _board[i][k] !== 0) continue;\r\n                valArr.push(_board[i][k]);\r\n            }\r\n        }\r\n        if (valArr.includes(0)) {\r\n            return \"This isn't mate\";\r\n        } else if (!valArr.includes(0) && isUnderAttack === false) {\r\n            return 'This is stalemate. Nobody wins';\r\n        } else {\r\n            return 'White wins.';\r\n        }\r\n    }\r\n\r\n    //CHECK IF FIGURES BLOCKING ATACK\r\n    isNotBlocking(rowNum, pos, selfPosition) {\r\n        const curFigure = this.state[rowNum][pos];\r\n\r\n        if (curFigure < 10 || curFigure === selfPosition) {\r\n            return true;\r\n        } else if (curFigure === 50) {\r\n            this.isProtected = { ...this.isProtected, [curFigure]: true };\r\n            return true;\r\n        } else {\r\n            this.isProtected = { ...this.isProtected, [curFigure]: true };\r\n            return false;\r\n        }\r\n    }\r\n\r\n    queenZone() {\r\n        let selfPosition = this.queen;\r\n        const [rowNum, pos] = this.positions[selfPosition];\r\n        const numMainDiagonal = rowNum + pos;\r\n        const numSecDiagonal = rowNum - pos;\r\n\r\n        const whiteList = [selfPosition, this.blackKing];\r\n\r\n        //! FOR THE TOP PART OF DESK\r\n        // FOR - TO TOP-RIGHT SKEW LINE\r\n        loop: for (let i = rowNum; i >= 0; i--) {\r\n            for (let k = pos; k < 8; k++) {\r\n                if (i + k === numMainDiagonal) {\r\n                    if (this.isNotBlocking(i, k, selfPosition)) {\r\n                        if (whiteList.includes(this.state[i][k])) continue;\r\n                        this.state[i][k] = this.attackZone;\r\n                    } else {\r\n                        break loop;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // FOR - TO TOP STRAIGHT LINE\r\n        loop: for (let i = rowNum; i >= 0; i--) {\r\n            for (let k = pos; k < 8; k++) {\r\n                if (k === pos) {\r\n                    if (this.isNotBlocking(i, k, selfPosition)) {\r\n                        if (whiteList.includes(this.state[i][k])) continue;\r\n                        this.state[i][k] = this.attackZone;\r\n                    } else {\r\n                        break loop;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // FOR - TO TOP-LEFT SKEW LINE\r\n        loop: for (let i = rowNum; i >= 0; i--) {\r\n            for (let k = pos; k >= 0; k--) {\r\n                if (i - k === numSecDiagonal) {\r\n                    if (this.isNotBlocking(i, k, selfPosition)) {\r\n                        if (whiteList.includes(this.state[i][k])) continue;\r\n                        this.state[i][k] = this.attackZone;\r\n                    } else {\r\n                        break loop;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        //! FOR THE BOTTOM PART OF rowNum\r\n        // FOR - TO BOTTOM-RIGHT SKEW LINE\r\n        loop: for (let i = rowNum; i < 8; i++) {\r\n            for (let k = pos; k < 8; k++) {\r\n                if (i - k === numSecDiagonal) {\r\n                    if (this.isNotBlocking(i, k, selfPosition)) {\r\n                        if (whiteList.includes(this.state[i][k])) continue;\r\n                        this.state[i][k] = this.attackZone;\r\n                    } else {\r\n                        break loop;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // FOR - TO BOTTOM STRAIGHT LINE\r\n        loop: for (let i = rowNum; i < 8; i++) {\r\n            for (let k = pos; k < 8; k++) {\r\n                if (k === pos) {\r\n                    if (this.isNotBlocking(i, k, selfPosition)) {\r\n                        if (whiteList.includes(this.state[i][k])) continue;\r\n                        this.state[i][k] = this.attackZone;\r\n                    } else {\r\n                        break loop;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // FOR - TO BOTTOM-LEFT SKEW LINE\r\n        loop: for (let i = rowNum; i < 8; i++) {\r\n            for (let k = pos; k >= 0; k--) {\r\n                if (i + k === numMainDiagonal) {\r\n                    if (this.isNotBlocking(i, k, selfPosition)) {\r\n                        if (whiteList.includes(this.state[i][k])) continue;\r\n                        this.state[i][k] = this.attackZone;\r\n                    } else {\r\n                        break loop;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        //! FOR THE HORIZONTAL LINE OF DESK\r\n        // TO LEFT HORIZONTAL LINE\r\n        for (let k = pos - 1; k >= 0; k--) {\r\n            if (this.isNotBlocking(rowNum, k, selfPosition)) {\r\n                if (this.state[rowNum][k] === 50) continue;\r\n                this.state[rowNum][k] = this.attackZone;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        // TO RIGHT HORIZONTAL LINE\r\n        for (let k = pos + 1; k < 8; k++) {\r\n            if (this.isNotBlocking(rowNum, k, selfPosition)) {\r\n                if (this.state[rowNum][k] === 50) continue;\r\n                this.state[rowNum][k] = this.attackZone;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    bishopZone() {\r\n        let selfPosition = this.bishop;\r\n        const [rowNum, pos] = this.positions[selfPosition];\r\n        const numMainDiagonal = rowNum + pos;\r\n        const numSecDiagonal = rowNum - pos;\r\n        const whiteList = [selfPosition, this.blackKing];\r\n\r\n        // FOR - TO TOP-RIGHT SKEW LINE\r\n        loop: for (let i = rowNum; i >= 0; i--) {\r\n            for (let k = pos; k < 8; k++) {\r\n                if (i + k === numMainDiagonal) {\r\n                    if (this.isNotBlocking(i, k, selfPosition)) {\r\n                        if (whiteList.includes(this.state[i][k])) continue;\r\n                        this.state[i][k] = this.attackZone;\r\n                    } else {\r\n                        break loop;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // FOR - TO TOP-LEFT SKEW LINE\r\n        loop: for (let i = rowNum; i >= 0; i--) {\r\n            for (let k = pos; k >= 0; k--) {\r\n                if (i - k === numSecDiagonal) {\r\n                    if (this.isNotBlocking(i, k, selfPosition)) {\r\n                        if (whiteList.includes(this.state[i][k])) continue;\r\n                        this.state[i][k] = this.attackZone;\r\n                    } else {\r\n                        break loop;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // FOR - TO BOTTOM-RIGHT SKEW LINE\r\n        loop: for (let i = rowNum; i < 8; i++) {\r\n            for (let k = pos; k < 8; k++) {\r\n                if (i - k === numSecDiagonal) {\r\n                    if (this.isNotBlocking(i, k, selfPosition)) {\r\n                        if (whiteList.includes(this.state[i][k])) continue;\r\n                        this.state[i][k] = this.attackZone;\r\n                    } else {\r\n                        break loop;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // FOR - TO BOTTOM-LEFT SKEW LINE\r\n        loop: for (let i = rowNum; i < 8; i++) {\r\n            for (let k = pos; k >= 0; k--) {\r\n                if (i + k === numMainDiagonal) {\r\n                    if (this.isNotBlocking(i, k, selfPosition)) {\r\n                        if (whiteList.includes(this.state[i][k])) continue;\r\n                        this.state[i][k] = this.attackZone;\r\n                    } else {\r\n                        break loop;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    kingZone() {\r\n        const selfPosition = this.king;\r\n        const [rowNum, pos] = this.positions[selfPosition];\r\n        const whiteList = [selfPosition, this.blackKing];\r\n\r\n        for (let i = rowNum - 1; i <= rowNum + 1; i++) {\r\n            for (let k = pos - 1; k <= pos + 1; k++) {\r\n                if (!this.state[i] || k < 0 || k > 7 || whiteList.includes(this.state[i][k])) continue;\r\n                if (this.isNotBlocking(i, k, selfPosition)) this.state[i][k] = this.attackZone;\r\n            }\r\n        }\r\n    }\r\n\r\n    horseZone() {\r\n        const selfPosition = this.horse;\r\n        const [rowNum, pos] = this.positions[selfPosition];\r\n        const whiteList = [selfPosition, this.blackKing];\r\n        const posMinus1 = pos - 1;\r\n        const posMinus2 = pos - 2;\r\n        const posPlus1 = pos + 1;\r\n        const posPlus2 = pos + 2;\r\n\r\n        for (let i = rowNum - 2; i <= rowNum + 2; i++) {\r\n            if (!this.state[i]) continue;\r\n\r\n            if (i === rowNum + 2 || i === rowNum - 2) {\r\n                if (posMinus1 >= 0) {\r\n                    if (\r\n                        this.isNotBlocking(i, posMinus1, selfPosition) &&\r\n                        !whiteList.includes(this.state[i][posMinus1])\r\n                    ) {\r\n                        this.state[i][posMinus1] = this.attackZone;\r\n                    }\r\n                }\r\n                if (posPlus1 <= 7) {\r\n                    if (\r\n                        this.isNotBlocking(i, posPlus1, selfPosition) &&\r\n                        !whiteList.includes(this.state[i][posPlus1])\r\n                    ) {\r\n                        this.state[i][posPlus1] = this.attackZone;\r\n                    }\r\n                }\r\n            }\r\n            if (i === rowNum - 1 || i === rowNum + 1) {\r\n                if (posMinus2 >= 0) {\r\n                    if (\r\n                        this.isNotBlocking(i, posMinus2, selfPosition) &&\r\n                        !whiteList.includes(this.state[i][posMinus2])\r\n                    ) {\r\n                        this.state[i][posMinus2] = this.attackZone;\r\n                    }\r\n                }\r\n                if (posPlus2 <= 7) {\r\n                    if (\r\n                        this.isNotBlocking(i, posPlus2, selfPosition) &&\r\n                        !whiteList.includes(this.state[i][posPlus2])\r\n                    ) {\r\n                        this.state[i][posPlus2] = this.attackZone;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    runAll() {\r\n        this.queenZone();\r\n        this.bishopZone();\r\n        this.kingZone();\r\n        this.horseZone();\r\n    }\r\n}\r\n","import styled from 'styled-components';\r\n\r\n\r\nexport const Image = styled.div(props => {\r\n    const { activeFigure, elm } = props;\r\n\r\n    return `\r\n\ttransform: ${activeFigure === elm ? 'scale(1.2)' : ''};\r\n\tbackground-size: cover;\r\n\tbackground-position: center;\r\n   `;\r\n});\r\n","import React from 'react';\r\n\r\n// COMPONENTS\r\nimport { Image } from './ChessFigure.styled.js';\r\n\r\nconst ChessFigure = ({ elm, selectActiveFigure, activeFigure }) => {\r\n    const classes = ['chess-figure', `chess-figure--${elm}`, 'chess-figure--outside'];\r\n\r\n    return (\r\n        <Image\r\n            className={classes.join(' ')}\r\n            activeFigure={activeFigure}\r\n            elm={elm}\r\n            onClick={selectActiveFigure.bind(this, elm)}\r\n        />\r\n    );\r\n};\r\n\r\nexport default ChessFigure;\r\n","import styled from 'styled-components';\r\n\r\nexport const BoardCell = styled.li(props => {\r\n    const { activeFigure, figuresProtected, item } = props;\r\n\r\n    return `\r\n   background-color:${\r\n       item === 1\r\n           ? 'rgba(255, 0, 0, 0.200)'\r\n           : figuresProtected[item] && item === 50\r\n           ? 'rgba(255, 0, 0, 0.500)'\r\n           : figuresProtected[item]\r\n           ? 'rgba(0, 184, 0, 0.350)'\r\n           : ''\r\n   };\r\n   &:hover {\r\n     background-color: ${activeFigure ? 'rgba(255, 208, 0, 0.250)' : ''};\r\n   }\r\n   \r\n   `;\r\n});\r\n\r\nexport const Image = styled.div(props => {\r\n    // const { imageUrl, height, width, flex } = props;\r\n\r\n    return `\r\n\t\r\n\tbackground-size: cover;\r\n\tbackground-position: center;\r\n   `;\r\n});\r\n","import React from 'react';\r\n\r\nimport { Image } from './ChessBoard.styled';\r\n\r\nimport { BoardCell } from './ChessBoard.styled.js';\r\n\r\nconst ChessBoard = ({ state, setFigures, figuresProtected, activeFigure }) => {\r\n    const handleClick = (event, rowIdx, itemIdx, item) => {\r\n        setFigures(rowIdx, itemIdx, item, { x: event.clientX, y: event.clientY });\r\n    };\r\n\r\n    return (\r\n        <div className=\"chess-board\">\r\n            <div className=\"chess-board__part-1\"></div>\r\n            <div className=\"chess-board__part-2\"></div>\r\n\r\n            <div className=\"chess-board__cell-container\">\r\n                {state.map((row, rowIdx) => (\r\n                    <ul key={rowIdx} className=\"chess-board__row\">\r\n                        {row.map((item, itemIdx) => {\r\n                            return (\r\n                                <BoardCell\r\n                                    figuresProtected={figuresProtected}\r\n                                    item={item}\r\n                                    activeFigure={activeFigure}\r\n                                    key={`${rowIdx}-${itemIdx}`}\r\n                                    onClick={event => handleClick(event, rowIdx, itemIdx, item)}\r\n                                    className=\"chess-board__cell\">\r\n                                    {item > 9 ? (\r\n                                        <Image\r\n                                            className={`\r\n\t\t\t\t\t\t\t\t\t\tchess-figure \r\n\t\t\t\t\t\t\t\t\t\tchess-board__cell-figure  \r\n\t\t\t\t\t\t\t\t\t\tchess-figure--${item}`}\r\n                                        />\r\n                                    ) : null}\r\n                                </BoardCell>\r\n                            );\r\n                        })}\r\n                    </ul>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChessBoard;\r\n","import React from \"react\";\r\n\r\nconst CustomButton = ({ className, children, ...otherProps }) => {\r\n\treturn (\r\n\t\t<button {...otherProps} className={className ? `ns-btn ${className}` : \"ns-btn\"}>\r\n\t\t\t{children}\r\n\t\t</button>\r\n\t);\r\n};\r\n\r\nexport default CustomButton;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Transition from 'react-transition-group/Transition';\nimport Button from '../button/Button.copmponent';\n\nconst animationTiming = {\n    enter: 700,\n    exit: 500,\n};\n\nconst modal = props => {\n    const { show, closeModal, mateStatus } = props;\n\n    return ReactDOM.createPortal(\n        <Transition mountOnEnter unmountOnExit in={show} timeout={animationTiming}>\n            {state => {\n                const cssClasses = [\n                    'modal',\n                    state === 'entering' ? 'modal--open' : state === 'exiting' ? 'modal--closed' : null,\n                ];\n\n                return (\n                    <div className={cssClasses.join(' ')}>\n                        <h1 className=\"mate-checker__status\">{mateStatus}</h1>\n                        <div>\n                            <Button className=\"ns-btn--black\" onClick={closeModal}>\n                                Reset positions\n                            </Button>\n                        </div>\n                    </div>\n                );\n            }}\n        </Transition>,\n        document.getElementById('root')\n    );\n};\n\nexport default modal;\n","// LIBRARIES\r\nimport React, { useState } from 'react';\r\n//UTILS\r\nimport { Figures } from './mate-checker.methods.js';\r\n\r\n// COMPONENTS\r\nimport ChessFigure from '../../components/chess-figure/ChessFigure.component';\r\nimport ChessBoard from '../../components/chess-board/ChessBoard.component';\r\nimport Modal from '../../components/modal/Modal.component';\r\nimport Button from '../../components/button/Button.copmponent';\r\n\r\nconst MateChecker = () => {\r\n    /* White\r\n     *king = 10; queen = 20;horse = 30; bishop = 40*/\r\n    /* Black\r\n     *king = 50;*/\r\n\r\n    const initialState = Array(8).fill(Array(8).fill(0));\r\n    const initialPositions = { 10: undefined, 20: undefined, 30: undefined, 40: undefined, 50: undefined };\r\n    const initialProtected = { 10: false, 20: false, 30: false, 40: false, 50: false };\r\n\r\n    const [state, setState] = useState(initialState);\r\n    const [isSubmited, setIsSubmited] = useState(false);\r\n    const [activeFigure, setActiveFigure] = useState('');\r\n    const [figuresProtected, setFiguresProtected] = useState(initialProtected);\r\n    const [figuresPositions, setFiguresPositions] = useState(initialPositions);\r\n    const [mateStatus, setMateStatus] = useState('');\r\n\r\n    //SET FIGURES TO THE BOARD\r\n    const setFigures = (rowIdx, itemIdx, selectedFigure) => {\r\n        // USER MUST RESET THE GAME AFTER SUBMITTING\r\n        if (isSubmited) return;\r\n        const stateJSON = JSON.stringify(state);\r\n        const _board = JSON.parse(stateJSON);\r\n\r\n        // UNDO SETTED FIGURE POSITION\r\n        if (!activeFigure) {\r\n            if (!selectedFigure) return;\r\n            setFiguresPositions(prevState => ({\r\n                ...prevState,\r\n                [selectedFigure]: null,\r\n            }));\r\n            _board[rowIdx][itemIdx] = 0;\r\n            return setState(_board);\r\n        }\r\n        // VALIDATE FIGURE SETTING\r\n        // FORBID USER SETTING FIGURES IN THE SAME AREA\r\n        if (_board[rowIdx][itemIdx] > 9) {\r\n            alert('This field has already occupied');\r\n            return;\r\n        }\r\n\r\n        //SET FIGURE TO THE SELECTED AREA\r\n        setFiguresPositions(prevState => ({\r\n            ...prevState,\r\n            [activeFigure]: [rowIdx, itemIdx],\r\n        }));\r\n        _board[rowIdx][itemIdx] = activeFigure;\r\n        setState(_board);\r\n        setActiveFigure('');\r\n    };\r\n    //SELECT FIGURE THAT INTENDED TO SET ON THE BOARD\r\n    const selectActiveFigure = selectedFigure => {\r\n        if (selectedFigure === activeFigure) {\r\n            setActiveFigure('');\r\n        } else {\r\n            setActiveFigure(selectedFigure);\r\n        }\r\n    };\r\n    //VALIDATION FOR TWO KINGS\r\n    const kingsPositionsValidator = (whiteKing, blackKing) => {\r\n        const [whiteKingRow, whiteKingInd] = [...whiteKing];\r\n        const [blackKingRow, blackKingInd] = [...blackKing];\r\n\r\n        if (Math.abs(whiteKingRow - blackKingRow) <= 1 && Math.abs(whiteKingInd - blackKingInd) <= 1) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    const submitAll = () => {\r\n        if (isSubmited) return;\r\n        const figures = new Figures(state, figuresPositions, figuresProtected);\r\n        const positionArr = Object.values(figuresPositions);\r\n\r\n        // CHECK IF ALL FIGURES HAS BEEN PLACED AND VALIDATE IT\r\n        if (!positionArr.map(item => item).includes(null)) {\r\n            if (!kingsPositionsValidator(figuresPositions[10], figuresPositions[50])) {\r\n                alert(\"You can't set two kings next to each other\");\r\n                return;\r\n            }\r\n            figures.runAll();\r\n            setState(figures.state);\r\n            setFiguresProtected(prevState => ({ ...prevState, ...figures.isProtected }));\r\n            setMateStatus(figures.checkIsMate());\r\n        } else {\r\n            alert('Please set all figures');\r\n            return;\r\n        }\r\n        setIsSubmited(true);\r\n    };\r\n\r\n    const reset = () => {\r\n        setState(initialState);\r\n        setFiguresPositions(initialPositions);\r\n        setFiguresProtected(initialProtected);\r\n        setIsSubmited(false);\r\n    };\r\n\r\n    return (\r\n        <div className=\"mate-checker\">\r\n            <div className=\"mate-checker__main\">\r\n                <div className=\"mate-checker__container\">\r\n                    <div className=\"mate-checker__left-side\">\r\n                        <div className=\"mate-checker__btn\">\r\n                            <Button className=\"ns-btn--black\" onClick={submitAll}>\r\n                                Submit\r\n                            </Button>\r\n                        </div>\r\n                        \r\n                        <div className=\"mate-checker__figures\">\r\n                            {Object.keys(figuresPositions).map(elm => {\r\n                                return !figuresPositions[elm] ? (\r\n                                    <ChessFigure\r\n                                        activeFigure={activeFigure}\r\n                                        selectActiveFigure={selectActiveFigure}\r\n                                        figuresPositions={figuresPositions}\r\n                                        key={elm}\r\n                                        elm={+elm}\r\n                                    />\r\n                                ) : (\r\n                                    <div key={elm}></div>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <ChessBoard\r\n                        state={state}\r\n                        activeFigure={activeFigure}\r\n                        setFigures={setFigures}\r\n                        figuresProtected={figuresProtected}\r\n                    />\r\n\r\n                    <Modal show={isSubmited} mateStatus={mateStatus} closeModal={reset} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MateChecker;\r\n","import React from \"react\";\r\nimport MateChecker from \"../pages/mate-checker/MateChecker.page\";\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<div className='App'>\r\n\t\t\t<MateChecker />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App/App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}